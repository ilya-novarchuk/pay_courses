

import dateparser
import telebot

import config
import database_funcs


bot = telebot.TeleBot(config.TELEGRAM_TOKEN)


def is_admin(id: int | str) -> bool:
    if not isinstance(id, str):
        id = str(id)
    return id in config.TELEGRAM_ADMINS


class BuildMarkup:

    @staticmethod
    def menu(id) -> telebot.types.ReplyKeyboardMarkup:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btns = []
        if is_admin(id):
            btns.append(telebot.types.KeyboardButton('/create_course'))
            btns.append(telebot.types.KeyboardButton('/edit_course'))
            btns.append(telebot.types.KeyboardButton('/delete_corse'))
            btns.append(telebot.types.KeyboardButton('/create_lesson'))
            btns.append(telebot.types.KeyboardButton('/edit_lesson'))
            btns.append(telebot.types.KeyboardButton('/delete_lesson'))
        btns.append('Обзор курсов')
        btns.append('Обзор лекций')
        markup.add(*btns)
        return markup

    @staticmethod
    def select_course() -> telebot.types.ReplyKeyboardMarkup:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        courses = database_funcs.get_courses()
        btns = [telebot.types.KeyboardButton(c.name) for c in courses]
        markup.add(*btns)
        return markup

class CourseManagment:

    @bot.message_handler(commands=['create_course'])
    @staticmethod
    def create_course(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Введите название курса:')
            bot.register_next_step_handler(message, CourseManagment.create_course_step2)
        else:
            bot.send_message(message.from_user.id, 'Вы не администратор.')

    @staticmethod
    def create_course_step2(message: telebot.types.Message):
        name = message.text
        bot.send_message(message.from_user.id, 'Введите описание курса:')
        bot.register_next_step_handler(message, CourseManagment.create_course_step3, name)

    @staticmethod
    def create_course_step3(message: telebot.types.Message,
                            name: str):
        description = message.text
        bot.send_message(message.from_user.id, 'Введите цену за весь курс:')
        bot.register_next_step_handler(message, CourseManagment.create_course_step4,
                                       name, description)

    @staticmethod
    def create_course_step4(message: telebot.types.Message,
                            name: str,
                            description: str):
        try:
            price = int(message.text)
            database_funcs.create_course(name, description, price)
            bot.send_message(message.from_user.id, 'Курс создан.')
        except Exception as exp:
            bot.send_message(message.from_user.id, str(exp))

    @bot.message_handler(commands=['edit_course_name'])
    @staticmethod
    def edit_course_name(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Выберите курс:',
                             reply_markup=BuildMarkup.select_course())
            bot.register_next_step_handler(message, CourseManagment.edit_course_name_step2)
        else:
            bot.send_message(message.from_user.id, 'Вы не администратор.')

    @staticmethod
    def edit_course_name_step2(message: telebot.types.Message):
        try:
            course_name = message.text
            course_id = database_funcs.get_course_id(course_name)
            bot.send_message(message.from_user.id, 'Введите новое название:')
            bot.register_next_step_handler(message,
                                           CourseManagment.edit_course_name_step3,
                                           course_id)
        except Exception as exp:
            bot.send_message(message.from_user.id, str(exp))

    @staticmethod
    def edit_course_name_step3(message: telebot.types.Message,
                               course_id: int):
        new_name = message.text


    def edit_course_description():
        pass

    def edit_course_price():
        pass

    @bot.message_handler(commands=['delete_course'])
    @staticmethod
    def delete_course(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Введите id курса:')
            bot.register_next_step_handler(message, delete_course_read_id)
        else:
            bot.send_message(message.from_user.id, 'Вы не администратор.')

    @staticmethod
    def delete_course_read_id(message: telebot.types.Message):
        id = int(message.text)
        database_funcs.delete_course(id)
        bot.send_message(message.from_user.id, 'Курс со всеми лекциями удален')



class LessonManagment:

    @bot.message_handler(commands=['create_lesson'])
    def create_lesson(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Введите id курса:')
            bot.register_next_step_handler(message, create_lesson_read_id)
        else:
            bot.send_message(message.from_user.id, 'Вы не администратор.')


    def create_lesson_read_id(message: telebot.types.Message):
        try:
            id = int(message.text)
            if database_funcs.course_exist(id):
                bot.send_message(message.from_user.id, 'Введите описание:')
                bot.register_next_step_handler(message, create_lesson_read_description, id)
            else:
                bot.send_message(message.from_user.id, 'Курс не существует.')
        except Exception as exp:
            bot.send_message(message.from_user.id, str(exp))


    def create_lesson_read_description(message: telebot.types.Message, id: int):
        description = message.text
        bot.send_message(message.from_user.id, 'Введите дату:')
        bot.register_next_step_handler(message, create_lesson_read_date, id, description)


    def create_lesson_read_date(message: telebot.types.Message,
                                id: int,
                                description: str):
        try:
            date = dateparser.parse(message.text)
            database_funcs.create_lesson(id, description, date)
            bot.send_message(message.from_user.id, 'Лекция создана.')
        except Exception as exp:
            bot.send_message(message.from_user.id, str(exp))


    @bot.message_handler(commands=['edit_lesson'])
    def edit_lesson(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Введите id курса:')
            bot.register_next_step_handler(message, edit_lesson_read_id)
        else:
            bot.send_message(message.from_user.id, 'Вы не администратор.')


    def edit_lesson_read_id(message: telebot.types.Message):
        id = int(message.text)
        if database_funcs.lesson_exist(id):
            bot.send_message(message.from_user.id, 'Введите новое описание:')
            bot.register_next_step_handler(message, edit_lesson_read_description, id)
        else:
            bot.send_message(message.from_user.id, 'Лекция не существует.')


    def edit_lesson_read_description(message: telebot.types.Message,
                                    id: int):
        description = message.text
        bot.send_message(message.from_user.id, 'Введите новую дату:')
        bot.register_next_step_handler(message, edit_lesson_read_date, id, description)


    def edit_lesson_read_date(message: telebot.types.Message,
                            id: int,
                            description: str):
        date = dateparser.parse(message.text)
        try:
            database_funcs.edit_lesson(id, description, date)
            bot.send_message(message.from_user.id, 'Лекция обновлена.')
        except Exception as exp:
            bot.send_message(message.from_user.id, str(exp))


    @bot.message_handler(commands=['delete_lesson'])
    def delete_lesson(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Введите id лекции:')
            bot.register_next_step_handler(message, delete_lesson_read_id)
        else:
            bot.send_message(message.from_user.id, 'Вы не администратор.')


    def delete_lesson_read_id(message: telebot.types.Message):
        id = int(message.text)
        if database_funcs.lesson_exist(id):
            database_funcs.delete_lesson(id)
            bot.send_message(message.from_user.id, 'Лекция удалена.')
        else:
            bot.send_message(message.from_user.id, 'Лекция не существует.')


class View:

    @bot.message_handler(commands=['view_courses'])
    def view_courses(message: telebot.types.Message):
        courses = database_funcs.get_courses()
        to_text = 'Список доступных курсов:'
        for c in courses:
            to_text += f'\n\n{c.description}\n(id курса: {c.id})'
        bot.send_message(message.from_user.id, to_text)


    @bot.message_handler(commands=['view_course'])
    def view_course(message: telebot.types.Message):
        bot.send_message(message.from_user.id, 'Введите id курса:')
        bot.register_next_step_handler(message, view_course_read_id)


    def view_course_read_id(message: telebot.types.Message):
        id = int(message.text)
        try:
            to_text = database_funcs.get_course_description(id)
            lessons = database_funcs.get_lessons_by_course(id)
            for num, l in enumerate(lessons):
                to_text += f'\n\n{num + 1}. {l.description}\nДата: {l.date}\n(id лекции: {l.id})'
            bot.send_message(message.from_user.id, to_text)
        except Exception as exp:
            bot.send_message(message.from_user.id, str(exp))


    @bot.message_handler(commands=['admin_view_courses'])
    def admin_view_courses(message: telebot.types.Message):
        courses = database_funcs.get_courses()
        courses = [f'id: {c.id}\ndescription: {c.description}' for c in courses]
        to_text = '\n\n'.join(courses)
        bot.send_message(message.from_user.id, to_text)


    @bot.message_handler(commands=['admin_view_lessons'])
    def admin_view_lessons(message: telebot.types.Message):
        lessons = database_funcs.get_lessons()
        lessons = [
            f'id: {l.id}\ncourse: {l.course_id}\ndescription: {l.description}\ndate: {l.date}'
            for l in lessons
        ]
        to_text = '\n\n'.join(lessons)
        bot.send_message(message.from_user.id, to_text)


class TBotMain:

    @bot.message_handler(commands=['start'])
    def start(message: telebot.types.Message):
        if is_admin(message.from_user.id):
            bot.send_message(message.from_user.id, 'Вы администратор!')
                            #reply_markup=build_markup(message.from_user.id))
        else:
            bot.send_message(message.from_user.id, 'Добро пожаловать!')
                            #reply_markup=build_markup(message.from_user.id))


    @bot.message_handler(content_types=['text'])
    def on_text(message: telebot.types.Message):
        if message.text == 'Обзор курсов':
            view_courses(message)
        elif message.text == 'Обзор лекций':
            view_course(message)
        else:
            bot.send_message(message.from_user.id, 'Нераспознанная команда')


#for admin in config.TELEGRAM_ADMINS:
#    bot.send_message(admin, 'Start')
bot.polling()

